#!/usr/bin/env python3
"""
Script para probar las mejoras de logs en entorno de producci√≥n
"""

import os
import sys

# Simular entorno de producci√≥n
os.environ['FLASK_ENV'] = 'production'

def test_production_logs():
    """Probar las mejoras de logs en producci√≥n"""
    print("üß™ Probando logs en entorno de producci√≥n...")
    print("=" * 60)
    
    try:
        # Importar y crear la aplicaci√≥n
        from main import create_app
        app = create_app()
        
        print("\n‚úÖ Aplicaci√≥n creada exitosamente en modo producci√≥n")
        print("üìã Logs esperados en producci√≥n:")
        print("   - INFO: Redis no disponible - usando fallback en memoria")
        print("   - INFO: Docker no disponible - funcionalidades de containerizaci√≥n limitadas")
        print("   - INFO: Rate limiting no disponible - usando fallback")
        print("   - INFO: Redis no disponible - balanceo de carga limitado")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error probando logs de producci√≥n: {e}")
        return False

def test_development_logs():
    """Probar logs en entorno de desarrollo"""
    print("\nüß™ Probando logs en entorno de desarrollo...")
    print("=" * 60)
    
    try:
        # Simular entorno de desarrollo
        os.environ['FLASK_ENV'] = 'development'
        
        # Importar y crear la aplicaci√≥n
        from main import create_app
        app = create_app()
        
        print("\n‚úÖ Aplicaci√≥n creada exitosamente en modo desarrollo")
        print("üìã Logs esperados en desarrollo:")
        print("   - WARNING: Redis no disponible: [error completo]")
        print("   - ERROR: Error Docker: [error completo]")
        print("   - WARNING: Rate limiting no disponible: [error completo]")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error probando logs de desarrollo: {e}")
        return False

if __name__ == "__main__":
    print("üîß Test de Mejoras de Logs para Producci√≥n")
    print("=" * 60)
    
    # Probar logs de producci√≥n
    production_success = test_production_logs()
    
    # Probar logs de desarrollo
    development_success = test_development_logs()
    
    print("\n" + "=" * 60)
    print("üìä Resumen de Pruebas:")
    print(f"   Producci√≥n: {'‚úÖ Exitoso' if production_success else '‚ùå Fall√≥'}")
    print(f"   Desarrollo: {'‚úÖ Exitoso' if development_success else '‚ùå Fall√≥'}")
    
    if production_success and development_success:
        print("\nüéâ Todas las pruebas pasaron exitosamente!")
        print("‚úÖ Las mejoras de logs est√°n funcionando correctamente")
    else:
        print("\n‚ö†Ô∏è Algunas pruebas fallaron")
        print("‚ùå Revisar las mejoras de logs")
    
    sys.exit(0 if (production_success and development_success) else 1)
