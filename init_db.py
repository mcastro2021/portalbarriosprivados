#!/usr/bin/env python3
"""
Script de inicializaci√≥n de la base de datos
Incluye migraci√≥n de columnas de 2FA
"""

import os
import sys
from sqlalchemy import text
from sqlalchemy.exc import OperationalError

def migrate_2fa_columns(db):
    """Agregar columnas de 2FA a la tabla users si no existen"""
    try:
        print("üîç Verificando columnas de 2FA...")
        
        # Verificar qu√© columnas ya existen
        result = db.session.execute(text("PRAGMA table_info(users)"))
        existing_columns = [row[1] for row in result.fetchall()]
        
        print(f"Columnas existentes: {existing_columns}")
        
        # Columnas a agregar
        columns_to_add = [
            {
                'name': 'two_factor_enabled',
                'definition': 'BOOLEAN DEFAULT FALSE'
            },
            {
                'name': 'two_factor_secret',
                'definition': 'VARCHAR(32)'
            },
            {
                'name': 'two_factor_enabled_at',
                'definition': 'TIMESTAMP'
            },
            {
                'name': 'two_factor_backup_codes',
                'definition': 'TEXT'
            }
        ]
        
        # Agregar columnas faltantes
        for column in columns_to_add:
            if column['name'] not in existing_columns:
                print(f"‚ûï Agregando columna: {column['name']}")
                sql = f"ALTER TABLE users ADD COLUMN {column['name']} {column['definition']}"
                db.session.execute(text(sql))
                print(f"‚úÖ Columna {column['name']} agregada exitosamente")
            else:
                print(f"‚ÑπÔ∏è Columna {column['name']} ya existe")
        
        db.session.commit()
        print("‚úÖ Migraci√≥n de columnas 2FA completada")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en migraci√≥n 2FA: {e}")
        db.session.rollback()
        return False

def init_database():
    """Inicializar la base de datos"""
    try:
        # Importar despu√©s de configurar el entorno
        from main import create_app
        from models import db, User
        
        app = create_app()
        
        with app.app_context():
            print("üöÄ Iniciando inicializaci√≥n de base de datos...")
            
            # Crear todas las tablas
            db.create_all()
            print("‚úÖ Tablas creadas exitosamente")
            
            # Migrar columnas de 2FA
            migrate_2fa_columns(db)
            
            # Verificar si ya existe un usuario admin
            admin_user = User.query.filter_by(username='admin').first()
            
            if not admin_user:
                print("üë§ Creando usuario administrador...")
                
                admin_user = User(
                    username='admin',
                    email='admin@barrioprivado.com',
                    name='Administrador',
                    role='admin',
                    is_active=True,
                    email_verified=True
                )
                admin_user.set_password('admin123')
                
                db.session.add(admin_user)
                db.session.commit()
                
                print("‚úÖ Usuario administrador creado exitosamente")
                print("   Usuario: admin")
                print("   Contrase√±a: admin123")
            else:
                print("‚ÑπÔ∏è Usuario administrador ya existe")
            
            print("üéâ Inicializaci√≥n de base de datos completada")
            return True
            
    except Exception as e:
        print(f"‚ùå Error en inicializaci√≥n: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = init_database()
    if success:
        print("‚úÖ Base de datos inicializada correctamente")
        sys.exit(0)
    else:
        print("‚ùå Error al inicializar la base de datos")
        sys.exit(1) 