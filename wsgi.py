#!/usr/bin/env python3
"""
WSGI entry point para Gunicorn
Archivo separado para evitar problemas de importaci√≥n
"""

import os
import sys
import traceback

# Agregar el directorio actual al path
sys.path.insert(0, os.path.dirname(__file__))

def create_application():
    """Crear aplicaci√≥n Flask de forma segura"""
    try:
        print("üîÑ Iniciando creaci√≥n de aplicaci√≥n WSGI...")
        
        # Intentar importar la aplicaci√≥n existente primero
        try:
            from app import app as existing_app
            if existing_app:
                print("‚úÖ Aplicaci√≥n existente encontrada en app.py")
                return existing_app
        except (ImportError, AttributeError) as e:
            print(f"‚ÑπÔ∏è No se pudo importar app existente: {e}")
        
        # Si no existe, crear usando create_app
        try:
            from app import create_app
            config_name = os.environ.get('FLASK_ENV', 'production')
            application = create_app(config_name)
            print("‚úÖ Aplicaci√≥n Flask creada usando create_app()")
            return application
        except Exception as e:
            print(f"‚ö†Ô∏è Error con create_app: {e}")
        
        # √öltimo intento: importar cualquier objeto Flask del m√≥dulo app
        try:
            import app as app_module
            for attr_name in dir(app_module):
                attr = getattr(app_module, attr_name)
                if hasattr(attr, 'wsgi_app'):  # Es una aplicaci√≥n Flask
                    print(f"‚úÖ Aplicaci√≥n Flask encontrada como {attr_name}")
                    return attr
        except Exception as e:
            print(f"‚ö†Ô∏è Error buscando aplicaci√≥n Flask: {e}")
        
        raise Exception("No se pudo encontrar ninguna aplicaci√≥n Flask v√°lida")
        
    except Exception as e:
        print(f"‚ùå Error cr√≠tico creando aplicaci√≥n Flask:")
        print(f"Error: {str(e)}")
        print("Traceback completo:")
        traceback.print_exc()
        
        # Crear aplicaci√≥n m√≠nima de fallback
        try:
            from flask import Flask, jsonify
            
            fallback_app = Flask(__name__)
            fallback_app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'fallback-secret-key')
            
            @fallback_app.route('/')
            def index():
                return jsonify({
                    'status': 'error',
                    'message': 'Aplicaci√≥n en modo fallback',
                    'error': str(e),
                    'help': 'Revisa los logs para m√°s detalles'
                })
            
            @fallback_app.route('/health')
            def health_check():
                return jsonify({
                    'status': 'unhealthy',
                    'message': 'Aplicaci√≥n principal fall√≥',
                    'error': str(e),
                    'fallback': True
                })
            
            @fallback_app.errorhandler(404)
            def not_found(error):
                return jsonify({
                    'status': 'error',
                    'message': 'Endpoint no encontrado',
                    'fallback_mode': True
                }), 404
            
            @fallback_app.errorhandler(500)
            def internal_error(error):
                return jsonify({
                    'status': 'error',
                    'message': 'Error interno del servidor',
                    'fallback_mode': True
                }), 500
            
            print("‚ö†Ô∏è Usando aplicaci√≥n de fallback completa")
            return fallback_app
            
        except Exception as fallback_error:
            print(f"üí• Error cr√≠tico creando fallback: {fallback_error}")
            # √öltimo recurso: aplicaci√≥n m√≠nima sin dependencias
            class MinimalWSGI:
                def __call__(self, environ, start_response):
                    status = '500 Internal Server Error'
                    headers = [('Content-Type', 'application/json')]
                    start_response(status, headers)
                    return [b'{"error": "Critical application failure", "status": "failed"}']
            
            return MinimalWSGI()

# Crear la aplicaci√≥n
print("üöÄ Iniciando WSGI...")
application = create_application()

# Alias para compatibilidad
app = application

# Verificar que la aplicaci√≥n es v√°lida
if hasattr(application, 'wsgi_app') or callable(application):
    print("‚úÖ Aplicaci√≥n WSGI v√°lida creada")
else:
    print("‚ö†Ô∏è Aplicaci√≥n creada pero podr√≠a no ser v√°lida para WSGI")

if __name__ == "__main__":
    if hasattr(application, 'run'):
        application.run(debug=False, host='0.0.0.0', port=5000)
    else:
        print("‚ùå No se puede ejecutar directamente - usar con Gunicorn")
